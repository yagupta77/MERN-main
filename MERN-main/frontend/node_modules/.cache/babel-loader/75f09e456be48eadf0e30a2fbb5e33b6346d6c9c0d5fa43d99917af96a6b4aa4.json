{"ast":null,"code":"// // src/components/ReviewerDashboard.js\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n\n// const ReviewerDashboard = ({ token }) => {\n//     const [applications, setApplications] = useState([]);\n//     const [selectedApplicationId, setSelectedApplicationId] = useState(null);\n//     const [remark, setRemark] = useState('');\n//     const [error, setError] = useState('');\n\n//     useEffect(() => {\n//         const fetchApplications = async () => {\n//             try {\n//                 const response = await axios.get('http://localhost:5000/api/applications', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setApplications(response.data);\n//             } catch (error) {\n//                 console.error('Error fetching applications:', error);\n//                 setError('Failed to load applications.');\n//             }\n//         };\n\n//         fetchApplications();\n//     }, [token]);\n\n//     const handleReview = async (applicationId, isSelected) => {\n//         try {\n//             if (isSelected) {\n//                 // Send to approver\n//                 await axios.put(`http://localhost:5000/api/applications/${applicationId}/send-to-approver`, {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 alert('Application sent to approver.');\n//             } else {\n//                 // Provide remark\n//                 await axios.put(`http://localhost:5000/api/applications/${applicationId}/remark`, {\n//                     remark,\n//                 }, {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 alert('Remark submitted to user.');\n//             }\n//             // Refresh applications after action\n//             const response = await axios.get('http://localhost:5000/api/applications', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setApplications(response.data);\n//             setSelectedApplicationId(null);\n//             setRemark('');\n//         } catch (error) {\n//             console.error('Error handling review:', error);\n//             setError('Failed to process review.');\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>Reviewer Dashboard</h1>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {applications.length > 0 ? (\n//                 applications.map(app => (\n//                     <div key={app._id}>\n//                         <h3>Application ID: {app._id}</h3>\n//                         <p>{app.details}</p>\n//                         <button onClick={() => {\n//                             setSelectedApplicationId(app._id);\n//                             handleReview(app._id, true); // Send to approver\n//                         }}>Send to Approver</button>\n//                         <button onClick={() => {\n//                             setSelectedApplicationId(app._id);\n//                             handleReview(app._id, false); // Provide remark\n//                         }}>Provide Remark</button>\n//                         {selectedApplicationId === app._id && (\n//                             <div>\n//                                 <textarea \n//                                     value={remark} \n//                                     onChange={(e) => setRemark(e.target.value)} \n//                                     placeholder=\"Enter remark\" \n//                                 />\n//                                 <button onClick={() => handleReview(app._id, false)}>Submit Remark</button>\n//                             </div>\n//                         )}\n//                     </div>\n//                 ))\n//             ) : (\n//                 <p>No applications to review.</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default ReviewerDashboard;","map":{"version":3,"names":[],"sources":["C:/Users/shiva/mern/frontend/src/components/ReviewerDashboard.js"],"sourcesContent":["// // src/components/ReviewerDashboard.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ReviewerDashboard = ({ token }) => {\r\n//     const [applications, setApplications] = useState([]);\r\n//     const [selectedApplicationId, setSelectedApplicationId] = useState(null);\r\n//     const [remark, setRemark] = useState('');\r\n//     const [error, setError] = useState('');\r\n\r\n//     useEffect(() => {\r\n//         const fetchApplications = async () => {\r\n//             try {\r\n//                 const response = await axios.get('http://localhost:5000/api/applications', {\r\n//                     headers: { Authorization: `Bearer ${token}` }\r\n//                 });\r\n//                 setApplications(response.data);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching applications:', error);\r\n//                 setError('Failed to load applications.');\r\n//             }\r\n//         };\r\n\r\n//         fetchApplications();\r\n//     }, [token]);\r\n\r\n//     const handleReview = async (applicationId, isSelected) => {\r\n//         try {\r\n//             if (isSelected) {\r\n//                 // Send to approver\r\n//                 await axios.put(`http://localhost:5000/api/applications/${applicationId}/send-to-approver`, {\r\n//                     headers: { Authorization: `Bearer ${token}` }\r\n//                 });\r\n//                 alert('Application sent to approver.');\r\n//             } else {\r\n//                 // Provide remark\r\n//                 await axios.put(`http://localhost:5000/api/applications/${applicationId}/remark`, {\r\n//                     remark,\r\n//                 }, {\r\n//                     headers: { Authorization: `Bearer ${token}` }\r\n//                 });\r\n//                 alert('Remark submitted to user.');\r\n//             }\r\n//             // Refresh applications after action\r\n//             const response = await axios.get('http://localhost:5000/api/applications', {\r\n//                 headers: { Authorization: `Bearer ${token}` }\r\n//             });\r\n//             setApplications(response.data);\r\n//             setSelectedApplicationId(null);\r\n//             setRemark('');\r\n//         } catch (error) {\r\n//             console.error('Error handling review:', error);\r\n//             setError('Failed to process review.');\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>Reviewer Dashboard</h1>\r\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//             {applications.length > 0 ? (\r\n//                 applications.map(app => (\r\n//                     <div key={app._id}>\r\n//                         <h3>Application ID: {app._id}</h3>\r\n//                         <p>{app.details}</p>\r\n//                         <button onClick={() => {\r\n//                             setSelectedApplicationId(app._id);\r\n//                             handleReview(app._id, true); // Send to approver\r\n//                         }}>Send to Approver</button>\r\n//                         <button onClick={() => {\r\n//                             setSelectedApplicationId(app._id);\r\n//                             handleReview(app._id, false); // Provide remark\r\n//                         }}>Provide Remark</button>\r\n//                         {selectedApplicationId === app._id && (\r\n//                             <div>\r\n//                                 <textarea \r\n//                                     value={remark} \r\n//                                     onChange={(e) => setRemark(e.target.value)} \r\n//                                     placeholder=\"Enter remark\" \r\n//                                 />\r\n//                                 <button onClick={() => handleReview(app._id, false)}>Submit Remark</button>\r\n//                             </div>\r\n//                         )}\r\n//                     </div>\r\n//                 ))\r\n//             ) : (\r\n//                 <p>No applications to review.</p>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ReviewerDashboard;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}