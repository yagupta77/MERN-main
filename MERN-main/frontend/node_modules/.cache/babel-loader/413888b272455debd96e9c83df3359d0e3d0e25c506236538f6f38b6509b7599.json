{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst ApproverDashboard = ({\n  token\n}) => {\n  _s();\n  const [applications, setApplications] = useState([]); // State to hold applications\n  const [error, setError] = useState(''); // State for error messages\n\n  useEffect(() => {\n    const fetchApprovedApplications = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/applications/approved', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          } // Use the passed token\n        });\n        console.log('Approved applications fetched:', response.data); // Log the fetched applications\n        setApplications(response.data); // Set the approved applications\n      } catch (error) {\n        console.error('Error fetching approved applications:', error);\n        setError('Error fetching approved applications'); // Handle error state\n      }\n    };\n    fetchApprovedApplications();\n  }, [token]);\n  const fetchPendingApplications = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/applications/pending', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Pending applications fetched:', response.data); // Log the fetched applications\n      setApplications(response.data); // Set the pending applications\n    } catch (error) {\n      console.error('Error fetching pending applications:', error);\n      setError('Error fetching pending applications');\n    }\n  };\n  const handleApprove = async applicationId => {\n    const token = localStorage.getItem('token'); // Retrieve the token from local storage\n    try {\n      // Send a request to approve the application\n      await axios.put(`http://localhost:5000/api/applications/${applicationId}/approve`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        } // Include the token in the header\n      });\n      // After approval, you might want to update the application status in the database\n      // Refresh the applications list after approval\n      setApplications(applications.filter(app => app._id !== applicationId));\n      alert('Application approved successfully.');\n    } catch (error) {\n      console.error('Error approving application:', error);\n      setError('Failed to approve application.');\n    }\n  };\n  const handleReject = async applicationId => {\n    const token = localStorage.getItem('token'); // Retrieve the token from local storage\n    try {\n      await axios.put(`http://localhost:5000/api/applications/${applicationId}/reject`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        } // Include the token in the header\n      });\n      // Refresh the applications list after rejection\n      setApplications(applications.filter(app => app._id !== applicationId));\n      alert('Application rejected successfully.');\n    } catch (error) {\n      console.error('Error rejecting application:', error);\n      setError('Failed to reject application.');\n    }\n  };\n};\n_s(ApproverDashboard, \"DFvcgEh4DdUMmZfE1q2e3EpL0s4=\");\n_c = ApproverDashboard;\nexport default ApproverDashboard;\nvar _c;\n$RefreshReg$(_c, \"ApproverDashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","ApproverDashboard","token","_s","applications","setApplications","error","setError","fetchApprovedApplications","response","get","headers","Authorization","console","log","data","fetchPendingApplications","handleApprove","applicationId","localStorage","getItem","put","filter","app","_id","alert","handleReject","_c","$RefreshReg$"],"sources":["C:/Users/shiva/mern/frontend/src/components/ApproverDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ApproverDashboard = ({ token }) => {\r\n    const [applications, setApplications] = useState([]); // State to hold applications\r\n    const [error, setError] = useState(''); // State for error messages\r\n\r\n    useEffect(() => {\r\n        const fetchApprovedApplications = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/api/applications/approved', {\r\n                    headers: { Authorization: `Bearer ${token}` } // Use the passed token\r\n                });\r\n                console.log('Approved applications fetched:', response.data); // Log the fetched applications\r\n                setApplications(response.data); // Set the approved applications\r\n            } catch (error) {\r\n                console.error('Error fetching approved applications:', error);\r\n                setError('Error fetching approved applications'); // Handle error state\r\n            }\r\n        };\r\n        fetchApprovedApplications();\r\n    }, [token]);\r\n\r\n\r\n    const fetchPendingApplications = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/api/applications/pending', {\r\n                headers: { Authorization: `Bearer ${token}` }\r\n            });\r\n            console.log('Pending applications fetched:', response.data); // Log the fetched applications\r\n            setApplications(response.data); // Set the pending applications\r\n        } catch (error) {\r\n            console.error('Error fetching pending applications:', error);\r\n            setError('Error fetching pending applications');\r\n        }\r\n    };\r\n    const handleApprove = async (applicationId) => {\r\n        const token = localStorage.getItem('token'); // Retrieve the token from local storage\r\n        try {\r\n            // Send a request to approve the application\r\n            await axios.put(`http://localhost:5000/api/applications/${applicationId}/approve`, {}, {\r\n                headers: { Authorization: `Bearer ${token}` } // Include the token in the header\r\n            });\r\n            // After approval, you might want to update the application status in the database\r\n            // Refresh the applications list after approval\r\n            setApplications(applications.filter(app => app._id !== applicationId));\r\n            alert('Application approved successfully.');\r\n        } catch (error) {\r\n            console.error('Error approving application:', error);\r\n            setError('Failed to approve application.');\r\n        }\r\n    };\r\n\r\n    const handleReject = async (applicationId) => {\r\n        const token = localStorage.getItem('token'); // Retrieve the token from local storage\r\n        try {\r\n            await axios.put(`http://localhost:5000/api/applications/${applicationId}/reject`, {}, {\r\n                headers: { Authorization: `Bearer ${token}` } // Include the token in the header\r\n            });\r\n            // Refresh the applications list after rejection\r\n            setApplications(applications.filter(app => app._id !== applicationId));\r\n            alert('Application rejected successfully.');\r\n        } catch (error) {\r\n            console.error('Error rejecting application:', error);\r\n            setError('Failed to reject application.');\r\n        }\r\n    };\r\n\r\n   \r\n};\r\n\r\nexport default ApproverDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}